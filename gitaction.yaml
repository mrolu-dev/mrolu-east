name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1
      AWS_ECR_REPO_NAME: your-ecr-repo-name
      GIT_USER_NAME: your-github-username
      GIT_REPO_NAME: your-repo-name
      REPOSITORY_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Install Node.js and npm
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Docker Image Build
        run: |
          docker system prune -f
          docker container prune -f
          docker build -t $AWS_ECR_REPO_NAME .
          
      - name: Install SonarScanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
          unzip sonar-scanner-cli-4.6.2.2472-linux.zip
          sudo mv sonar-scanner-4.6.2.2472-linux /opt/sonar-scanner
          export PATH=$PATH:/opt/sonar-scanner/bin

      - name: SonarQube Analysis
        run: |
          cd Application-Code/adservice
          /opt/sonar-scanner/bin/sonar-scanner \
            -Dsonar.projectName=adservice \
            -Dsonar.projectKey=adservice \
            -Dsonar.host.url=https://your-sonarqube-url.com \
            -Dsonar.login=$SONAR_TOKEN

      - name: Quality Check
        run: |
          ./gradlew check sonarqube -Dsonar.login=$SONAR_TOKEN

      - name: OWASP Dependency-Check Scan
        run: |
          ./dependency-check/bin/dependency-check.sh \
            --scan Application-Code/adservice \
            --format ALL \
            --out dependency-check-report.xml \
            --disableNodeAudit \
            --disableYarnAudit

      - name: Trivy File Scan
        run: |
          trivy fs Application-Code/adservice > trivyfs-adservice-job-${{ github.run_id }}.txt



      - name: Trivy Scan Image
        run: |
          trivy image $AWS_ECR_REPO_NAME > trivyimage-adservice-job-${{ github.run_id }}.txt

      - name: ECR Image Pushing
        run: |
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $REPOSITORY_URI
          docker tag $AWS_ECR_REPO_NAME $REPOSITORY_URI$AWS_ECR_REPO_NAME:${{ github.run_number }}
          docker push $REPOSITORY_URI$AWS_ECR_REPO_NAME:${{ github.run_number }}

      - name: Update Deployment file
        run: |
          git config user.email "o.olumoyin@gmail.com"
          git config user.name "Olu Olumoyin"
          BUILD_NUMBER=$(date +%s)
          imageTag=$(grep -oP '(?<=adservice:)[^ ]+' emart-manifests/adservice/adservice.yaml)
          sed -i "s/${AWS_ECR_REPO_NAME}:${imageTag}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}/" emart-manifests/adservice/adservice.yaml
          git add emart-manifests/adservice/adservice.yaml
          git commit -m "Update deployment Image to version $BUILD_NUMBER"
          git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main

      - name: Send Email Notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: 'CI/CD Pipeline Adservice Status'
          to: 'o.olumoyin@gmail.com'
          body: |
            The CI/CD Pipeline has completed successfully.
          attachments:
            - ./trivyfs-adservice-job-${{ github.run_id }}.txt
            - ./trivyimage-adservice-job-${{ github.run_id }}.txt

